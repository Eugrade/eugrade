/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/grades.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./dist/css/main.css":
/*!***************************!*\
  !*** ./dist/css/main.css ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack:///./dist/css/main.css?");

/***/ }),

/***/ "./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css":
/*!**************************************************************************!*\
  !*** ./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css ***!
  \**************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//# sourceURL=webpack:///./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css?");

/***/ }),

/***/ "./src/grades.js":
/*!***********************!*\
  !*** ./src/grades.js ***!
  \***********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _dist_css_main_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../dist/css/main.css */ \"./dist/css/main.css\");\n/* harmony import */ var _dist_css_main_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_dist_css_main_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ant-design-vue/dist/antd.css */ \"./node_modules/_ant-design-vue@1.3.17@ant-design-vue/dist/antd.css\");\n/* harmony import */ var ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(ant_design_vue_dist_antd_css__WEBPACK_IMPORTED_MODULE_1__);\n//引入 css 文件\n\n\n\nfunction new_obj(a, p, n) //声明对象\n{\n    this.average = a;\n    this.percent = p;\n    this.name = n;\n}\n\nvar antd = new Vue({\n    el: '#app',\n    data() {\n        return {\n            temp_topic_info: null,\n            lang: [],\n            i: 0,\n            sort: true,\n            stu_view_count: 0,\n            user: {\n                info: [],\n                id: cookie.get('logged_in_id'),\n                joined_classes: [],\n                classes_info: []\n            },\n            spinning: {\n                left: true,\n                center: false,\n                right: false\n            },\n            opened_class_info: {\n                id: null,\n                status: 0,\n                name: null,\n                des: null,\n                supername: null,\n                superid: null,\n                members: [],\n                img: null,\n                index: null\n            },\n            add: {\n                visible: {\n                    series: false,\n                    topic: false,\n                    record: false\n                },\n                confirm: {\n                    series: false,\n                    topic: false,\n                    record: false\n                },\n                info: {\n                    series: {\n                        name: null\n                    },\n                    topic: {\n                        name: null,\n                        series: {\n                            name: null,\n                            id: null\n                        }\n                    },\n                    record: {\n                        name: null,\n                        date: null,\n                        score: null,\n                        total: null,\n                        dd: null,\n                        yy: null,\n                        mm: null,\n                        user_id: null,\n                        member_index: null\n                    }\n                },\n            },\n            range: {\n                copy: {\n                    visible: false,\n                    confirm: false,\n                    from: null\n                },\n                visible: false,\n                confirm: false,\n                scale: [{\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    },\n                    {\n                        max: null,\n                        min: null\n                    }\n                ]\n            },\n            edit: {\n                visible: false,\n                confirm: false,\n                info: [],\n                date: null,\n                score: null,\n                total: null,\n                dd: null,\n                yy: null,\n                mm: null,\n            },\n            edit_info: {\n                visible: {\n                    series: false,\n                    topic: false\n                },\n                confirm: {\n                    series: false,\n                    topic: false\n                },\n                info: {\n                    series: {\n                        name: null,\n                        id: null\n                    },\n                    topic: {\n                        name: null\n                    }\n                }\n            },\n            delete: {\n                id: null,\n                series_id: null\n            },\n            level_count: [0, 0, 0, 0, 0, 0, 0, 0],\n            range_sign: ['a*', 'a', 'b', 'c', 'd', 'e', 'f', 'u'],\n            opened_topic_info: {\n                status: false,\n                info: null,\n                section: true,\n                records_data: [],\n                members_unused: [],\n                series_index: null,\n                grading: null,\n                grading_array: [],\n                average: null\n            },\n            opened_series_info: {\n                info: null,\n                status: false\n            },\n            stats: {\n                visible: {\n                    all: false,\n                    member: false\n                },\n                topics: [],\n                topics_info: [],\n                topics_name: [],\n                series: [],\n                topics_index: [],\n            },\n            switch: {\n                user_id: null\n            },\n            opened_stats_info: {\n                index: null,\n                info: null,\n                status: false,\n                chartData_all: {\n                    columns: ['name', 'average', 'percent'],\n                    rows: null\n                },\n                chartSettings_all: {\n                    axisSite: {\n                        left: ['average'],\n                        right: ['percent']\n                    },\n                    yAxisType: ['KMB', 'percent'],\n                    yAxisName: ['Average', 'Percentage']\n                }\n            },\n            chartData: {\n                columns: ['name', 'score', 'total', 'percent'],\n                rows: null\n            },\n        }\n    },\n    mounted() {\n        this.lang = lang_json;\n        axios.get('../interact/select_users.php?type=class&id=' + cookie.get('logged_in_id') + '&form=all')\n            .then(re => {\n                this.user.info = re.data[0];\n                if (!!re.data[0].class) {\n                    this.user.joined_classes = re.data[0].class.split(',');\n                    axios.get('../interact/select_classes.php?type=class&id=' + re.data[0].class + '&form=all')\n                        .then(res => {\n                            this.user.classes_info = res.data;\n                            this.spinning.left = false;\n                        })\n                } else {\n                    //若不存在班级信息\n                    this.spinning.left = false;\n                }\n                $('#main-container').attr('style', ''); //避免爆代码\n            });\n    },\n    methods: {\n        //处理创建系列\n        handle_series_submit(id) {\n            this.add.confirm.series = true;\n            var query_string = \"belong_class=\" + parseInt(id) + \"&name=\" + this.add.info.series.name + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/create_series.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.add.confirm.series = false;\n                        axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_series_info.info = resp.data;\n                            })\n                        this.add.visible.series = false;\n                        this.add.info.series.name = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.add.visible.series = false;\n                        this.add.info.series.name = null;\n                        this.add.confirm.series = false;\n                    }\n                })\n\n\n        },\n        handle_series_cancel() {\n            this.add.visible.series = false;\n        },\n        open_topic_submit(id, name) {\n            this.add.visible.topic = true;\n            this.add.info.topic.series.name = name;\n            this.add.info.topic.series.id = id;\n        },\n        //处理创建主题\n        handle_topic_submit() {\n            this.add.confirm.topic = true;\n            var query_string = \"belong_series=\" + this.add.info.topic.series.id + \"&belong_class=\" + this.opened_class_info.id + \"&name=\" + this.add.info.topic.name + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/create_topic.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.add.confirm.topic = false;\n                        axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_series_info.info = resp.data;\n                            })\n                        this.add.visible.topic = false;\n                        this.add.info.topic.name = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.add.visible.topic = false;\n                        this.add.info.topic.name = null;\n                        this.add.confirm.topic = false;\n                    }\n                })\n\n\n        },\n        handle_topic_cancel() {\n            this.add.visible.topic = false;\n        },\n\n        //处理创建记录\n        handle_record_submit() {\n            this.add.info.record.date = Date.parse(this.add.info.record.yy + '-' + this.add.info.record.mm + '-' + this.add.info.record.dd) / 1000;\n            this.add.confirm.record = true;\n            var query_string = \"user_id=\" + this.add.info.record.user_id + \"&belong_class=\" + this.opened_class_info.id + \"&belong_topic=\" + this.opened_topic_info.info.id + \"&name=\" + this.add.info.record.name + \"&creator=\" + this.user.id + \"&date=\" + this.add.info.record.date + \"&score=\" + this.add.info.record.score + \"&total=\" + this.add.info.record.total;\n\n            axios.post(\n                    '../interact/create_record.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.add.confirm.record = false;\n                        this.open_topic_info(this.opened_topic_info.info.id, this.opened_topic_info.series_index);\n                        axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_series_info.info = resp.data;\n                            })\n                        this.add.visible.record = false;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.add.visible.record = false;\n                        this.add.confirm.record = false;\n                    }\n                })\n\n\n        },\n        handle_record_cancel() {\n            this.add.visible.record = false;\n        },\n        //处理修改范围\n        handle_range_submit() {\n            this.range.confirm = true;\n\n            //连接范围字符串(等级|最大|最小,等级|最大|最小)\n            var range_string = '';\n            for (i = 0; i < 8; i++) {\n                if (\"undefined\" != typeof this.range.scale[i].max && this.range.scale[i].max !== null) {\n                    range_string += this.range_sign[i] + '|' + this.range.scale[i].max + '|' + this.range.scale[i].min + ',';\n                }\n            }\n            range_string = range_string.substr(0, range_string.length - 1);\n\n            var query_string = \"belong_class=\" + this.opened_class_info.id + \"&belong_topic=\" + this.opened_topic_info.info.id + \"&scale=\" + range_string + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/edit_topic_scale.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.range.confirm = false;\n                        this.open_topic_info(this.opened_topic_info.info.id, this.opened_topic_info.series_index);\n                        this.range.visible = false;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.range.confirm = false;\n                        this.range.visible = false;\n                    }\n                })\n\n        },\n        handle_range_cancel() {\n            this.range.visible = false;\n        },\n        //处理复制范围\n        handle_range_copy_submit() {\n            this.range.copy.confirm = true;\n\n            var query_string = \"scale=xxx&belong_class=\" + this.opened_class_info.id + \"&belong_topic=\" + this.opened_topic_info.info.id + \"&type=copy&from=\" + this.range.copy.from + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/edit_topic_scale.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.range.copy.confirm = false;\n                        this.open_topic_info(this.opened_topic_info.info.id, this.opened_topic_info.series_index);\n                        this.range.copy.visible = false;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.range.copy.confirm = false;\n                    }\n                })\n\n        },\n        handle_range_copy_cancel() {\n            this.range.copy.visible = false;\n            this.range.copy.from = null;\n            this.range.copy.confirm = false;\n        },\n        edit_record(index) {\n            this.edit.visible = true;\n            this.edit.info = this.opened_topic_info.records_data[index];\n            this.edit.yy = this.get_date(this.edit.info.date, 'y');\n            this.edit.mm = this.get_date(this.edit.info.date, 'm');\n            this.edit.dd = this.get_date(this.edit.info.date, 'd');\n            this.edit.score = this.edit.info.score;\n            this.edit.total = this.edit.info.total;\n        },\n        //处理修改记录\n        handle_edit_submit() {\n            this.edit.confirm = true;\n\n            var date = Date.parse(this.edit.yy + '-' + this.edit.mm + '-' + this.edit.dd) / 1000;\n\n            var query_string = \"record=\" + this.edit.info.id + \"&user_id=\" + this.edit.info.user_id + \"&belong_class=\" + this.opened_class_info.id + \"&belong_topic=\" + this.opened_topic_info.info.id + \"&creator=\" + this.user.id + \"&date=\" + date + \"&score=\" + this.edit.score + \"&total=\" + this.edit.total;\n\n            axios.post(\n                    '../interact/edit_record.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.edit.confirm = false;\n                        this.open_topic_info(this.opened_topic_info.info.id, this.opened_topic_info.series_index);\n                        this.edit.visible = false;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.edit.confirm = false;\n                        this.edit.visible = false;\n                    }\n                })\n\n        },\n        handle_edit_cancel() {\n            this.edit.visible = false;\n        },\n        //处理修改记录\n        delete_record(id) {\n            this.delete.id = id;\n            this.$confirm({\n                title: 'Do you want to delete this record?',\n                content: 'the process can not be redone',\n                onOk() {\n\n                    var query_string = \"class_id=\" + antd.opened_class_info.id + \"&super=\" + antd.user.id + \"&topic_id=\" + antd.opened_topic_info.info.id + \"&record_id=\" + antd.delete.id;\n\n                    axios.post(\n                            '../interact/delete_record.php',\n                            query_string\n                        )\n                        .then(res => {\n                            if (res.data.status) {\n                                antd.$message.success(res.data.mes);\n                                antd.open_topic_info(antd.opened_topic_info.info.id, antd.opened_topic_info.series_index);\n                            } else {\n                                antd.$message.error(res.data.mes);\n                            }\n                        })\n\n                }\n            })\n        },\n        //处理删除主题\n        delete_topic() {\n            this.$confirm({\n                title: 'Do you want to delete this topic?',\n                content: 'the process can not be redone',\n                onOk() {\n\n                    var query_string = \"class_id=\" + antd.opened_class_info.id + \"&super=\" + antd.user.id + \"&topic_id=\" + antd.opened_topic_info.info.id + \"&series_id=\" + antd.opened_topic_info.info.belong_series;\n\n                    axios.post(\n                            '../interact/delete_topic.php',\n                            query_string\n                        )\n                        .then(res => {\n                            if (res.data.status) {\n                                antd.$message.success(res.data.mes);\n                                antd.opened_topic_info.status = false;\n                                antd.open_class_info(antd.opened_class_info.index);\n                            } else {\n                                antd.$message.error(res.data.mes);\n                            }\n                        })\n\n                }\n            })\n        },\n        //处理删除系列\n        delete_series(id) {\n            this.delete.series_id = id;\n            this.$confirm({\n                title: 'Do you want to delete this series?',\n                content: 'the process can not be redone',\n                onOk() {\n\n                    var query_string = \"class_id=\" + antd.opened_class_info.id + \"&super=\" + antd.user.id + \"&series_id=\" + antd.delete.series_id;\n\n                    axios.post(\n                            '../interact/delete_series.php',\n                            query_string\n                        )\n                        .then(res => {\n                            if (res.data.status) {\n                                antd.$message.success(res.data.mes);\n                                antd.open_class_info(antd.opened_class_info.index);\n                            } else {\n                                antd.$message.error(res.data.mes);\n                            }\n                        })\n\n                }\n            })\n        },\n        //处理编辑主题\n        handle_edit_info_topic_submit() {\n            var query_string = \"belong_series=\" + this.opened_topic_info.info.belong_series + \"&belong_class=\" + this.opened_class_info.id + \"&topic_id=\" + this.opened_topic_info.info.id + \"&name=\" + this.edit_info.info.topic.name + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/edit_topic.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.edit_info.confirm.topic = false;\n                        axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_series_info.info = resp.data;\n                            })\n                        this.opened_topic_info.status = false;\n                        this.edit_info.visible.topic = false;\n                        this.edit_info.info.topic.name = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.edit_info.visible.topic = false;\n                        this.edit_info.info.topic.name = null;\n                        this.edit_info.confirm.topic = false;\n                    }\n                })\n\n\n        },\n        handle_edit_info_topic_cancel() {\n            this.edit_info.visible.topic = false;\n        },\n        //处理编辑系列\n        handle_edit_info_series_submit() {\n            var query_string = \"&belong_class=\" + this.opened_class_info.id + \"&series_id=\" + this.edit_info.info.series.id + \"&name=\" + this.edit_info.info.series.name + \"&creator=\" + this.user.id;\n\n            axios.post(\n                    '../interact/edit_series.php',\n                    query_string\n                )\n                .then(res => {\n                    if (res.data.status) {\n                        this.$message.success(res.data.mes);\n                        this.edit_info.confirm.series = false;\n                        axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                            .then(resp => {\n                                this.opened_series_info.info = resp.data;\n                            })\n                        this.opened_topic_info.status = false;\n                        this.edit_info.visible.series = false;\n                        this.edit_info.info.series.name = null;\n                    } else {\n                        this.$message.error(res.data.mes);\n                        this.edit_info.visible.topic = false;\n                        this.edit_info.info.topic.name = null;\n                        this.edit_info.confirm.topic = false;\n                    }\n                })\n\n\n        },\n        //编辑系列取消\n        handle_edit_info_series_cancel() {\n            this.edit_info.visible.series = false;\n        },\n        //打开编辑系列 modal\n        open_edit_info_series(id, name) {\n            this.edit_info.info.series.id = id;\n            this.edit_info.info.series.name = name;\n            this.edit_info.visible.series = true;\n        },\n\n        add_topic(id, name, series, topic) {\n            if ((this.stats.topics).indexOf(id) > -1) {\n                this.stats.topics_name.splice((this.stats.topics_name).indexOf(name), 1); //主题名\n                this.stats.topics.splice((this.stats.topics).indexOf(id), 1); //主题 ID\n                this.stats.series.splice((this.stats.series).indexOf(series), 1); //系列 index\n                this.stats.topics_index.splice((this.stats.topics_index).indexOf(topic), 1); //主题 index\n            } else {\n                this.stats.topics.push(id);\n                this.stats.series.push(series);\n                this.stats.topics_name.push(name);\n                this.stats.topics_index.push(topic);\n            }\n        },\n        //打开折线图查看选择 series 的 modal\n        open_stats(type, user) {\n            this.spinning.right = true;\n            //教师查看 topics 情况\n            if (parseInt(this.user.id) == parseInt(this.opened_class_info.superid) && type == 'view_topics') {\n                this.opened_stats_info.chartSettings_all = {\n                    axisSite: {\n                        left: ['average'],\n                        right: ['percent']\n                    },\n                    yAxisType: ['KMB', 'percent'],\n                    yAxisName: ['Average', 'Percentage']\n                };\n                axios.get('../interact/select_topic_average.php?topic_ids=' + this.stats.topics.join(',') + '&type=all')\n                    .then(res => {\n                        this.stats.topics_info = [];\n                        for (l = 0; l < (this.stats.topics).length; l++) {\n                            this.stats.topics_info[l] = new new_obj(0, 0, 'name'); //二维带对象数组需要初始化\n                            if(!!res.data[l][2]){ //判断是否存在主题名字\n                                var topic_name = '(' + res.data[l][2] + ')';\n                            }else{\n                                var topic_name = '(无记录)';\n                            }\n                            this.stats.topics_info[l]['name'] = this.stats.topics_name[l] + topic_name;\n                            this.stats.topics_info[l]['average'] = res.data[l][0];\n                            this.stats.topics_info[l]['percent'] = res.data[l][1];\n                        }\n                        this.display_chart();\n                    });\n            } else { //教师或学生查看用户情况\n                if (type == 'view_users') { //选择用户查看统计图\n                    var user_id = user; //教师查看\n                } else { //学生没有机会能把 type 赋值成 view_users\n                    var user_id = this.user.id;\n                }\n                this.opened_stats_info.chartSettings_all = {\n                    axisSite: {\n                        left: ['average'],\n                        right: ['percent']\n                    },\n                    yAxisType: ['KMB', 'percent'],\n                    yAxisName: ['Score', 'Percentage']\n                };\n                axios.get('../interact/select_topic_average.php?topic_ids=' + this.stats.topics.join(',') + '&type=student&user=' + user_id)\n                    .then(res => {\n                        this.stats.topics_info = [];\n                        for (l = 0; l < (this.stats.topics).length; l++) {\n                            this.stats.topics_info[l] = new new_obj(0, 0, 'name');\n                            if(!!res.data[l][2]){ //判断是否存在主题名字\n                                var topic_name = '(' + res.data[l][2] + ')';\n                            }else{\n                                var topic_name = '(无记录)';\n                            }\n                            //图标名称展示系列名+主题名+等级\n                            this.stats.topics_info[l]['name'] = this.stats.topics_name[l] + topic_name + '[' + this.get_record_level_independent(res.data[l][1], this.stats.series[l] ,this.stats.topics_index[l]) + ']';\n                            this.stats.topics_info[l]['average'] = res.data[l][0];\n                            this.stats.topics_info[l]['percent'] = res.data[l][1];\n                        }\n                        this.display_chart();\n                    });\n            }\n        },\n        handle_stats_cancel() {\n            this.stats.visible.all = false;\n        },\n        display_chart() { //点击展示统计图改变\n            this.opened_topic_info.status = false;\n            this.opened_stats_info.chartData_all.rows = [];\n            this.opened_stats_info.chartData_all.rows = this.stats.topics_info;\n            this.opened_stats_info.status = true;\n            var temp = this.stats.topics_info[0]['average'];\n            this.stats.topics_info[0]['average'] = 0;\n            this.stats.topics_info[0]['average'] = temp;\n            this.spinning.right = false;\n            this.stats.visible.all = false;\n        },\n\n\n\n\n        //判断是否为班级管理员，输出特殊样式\n        class_super(index) {\n            if (parseInt(this.user.classes_info[index].super) == this.user.id) {\n                return 'super';\n            } else {\n                return '';\n            }\n        },\n        //点击班级获取信息在 center 列展示\n        open_class_info(index) {\n            //选中增加 class，删除其余选中\n            $('.class-item').each(function () {\n                $(this).removeClass('clicked');\n            });\n            $('#class' + index).addClass('clicked');\n\n            this.level_count = [0, 0, 0, 0, 0, 0, 0, 0];\n            this.opened_stats_info.chartData_all.rows = [];\n            this.opened_topic_info.status = false;\n            this.opened_stats_info.status = false;\n\n            this.spinning.center = true;\n            this.opened_class_info.index = index;\n            this.opened_class_info.id = this.user.classes_info[index].id;\n            this.opened_class_info.superid = this.user.classes_info[index].super;\n\n            //获取全部班级成员\n            axios.get('../interact/select_classes.php?type=member&id=' + this.opened_class_info.id + '&form=single')\n                .then(recc => {\n                    this.opened_class_info.members_string = recc.data.member;\n                    axios.get('../interact/select_users.php?type=name&id=' + recc.data.member + '&form=all')\n                        .then(rec => {\n                            this.opened_class_info.members = rec.data;\n                            axios.get('../interact/select_series.php?class_id=' + this.opened_class_info.id)\n                                .then(resp => {\n                                    this.opened_series_info.info = resp.data;\n                                    this.spinning.center = false;\n                                    this.opened_series_info.status = true;\n                                })\n                        });\n                })\n        },\n        //获取用户类型\n        get_level(type) {\n            if (parseInt(type) == 1) {\n                return 'Student';\n            } else {\n                return 'Teacher';\n            }\n        },\n        //点击用户获取信息在 right 列展示\n        open_topic_info(id, index) {\n            //选中增加 class，删除其余选中\n            $('.center .class-item').each(function () {\n                $(this).removeClass('clicked');\n            });\n            $('#topic_sub' + id).addClass('clicked');\n\n            this.spinning.right = true;\n            this.opened_topic_info.series_index = index;\n            this.opened_stats_info.status = false;\n            this.opened_topic_info.grading_array = [];\n            this.opened_stats_info.chartData_all.rows = [];\n\n            this.level_count = [0, 0, 0, 0, 0, 0, 0, 0];\n\n            this.range.scale = [{\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }, {\n                max: null,\n                min: null\n            }];\n\n            axios.get('../interact/select_topic.php?topic_id=' + parseInt(id))\n                .then(res => {\n\n                    this.opened_topic_info.info = res.data[0];\n                    this.opened_topic_info.average = this.opened_topic_info.info.average;\n                    if (\"undefined\" != typeof res.data['records']) {\n                        //初始按照 score 升序排序\n                        this.opened_topic_info.records_data = res.data['records'].sort(\n                            firstBy('score')\n                        );\n                    }\n\n                    this.edit_info.info.topic.name = this.opened_topic_info.info.name;\n\n                    this.opened_topic_info.grading = this.opened_topic_info.info.scale;\n                    //转换全部成员 id 字符串为数组\n                    var members_array = this.opened_class_info.members_string.split(',');\n                    //循环全部已有记录匹配已记录的成员\n                    for (i = 0; i < (this.opened_topic_info.records_data).length; ++i) {\n                        if (members_array.indexOf(this.opened_topic_info.records_data[i].user_id + '') > -1) {\n                            members_array.splice(members_array.indexOf(this.opened_topic_info.records_data[i].user_id + ''), 1);\n                        }\n                    }\n                    //转换未存在记录的成员 id 数组为字符串\n                    var members_string = members_array.join(',');\n\n                    axios.get('../interact/select_users.php?type=name&id=' + members_string + '&form=all')\n                        .then(rec => {\n                            this.opened_topic_info.members_unused = rec.data;\n                            if ((this.opened_topic_info.members_unused).length) {\n                                this.add.info.record.name = this.opened_topic_info.members_unused[0].name;\n                                this.add.info.record.user_id = this.opened_topic_info.members_unused[0].id;\n                                this.add.info.record.member_index = 0;\n                            }\n                        });\n\n                    //统计表\n                    this.chartSettings = {\n                        showLine: ['percent'],\n                        axisSite: {\n                            right: ['percent']\n                        },\n                        yAxisType: ['KMB', 'percent'],\n                        yAxisName: ['Score', 'Percentage']\n                    }\n                    this.chartData.rows = this.opened_topic_info.records_data;\n\n\n                    //范围展示\n                    if (!!this.opened_topic_info.grading) {\n                        var array_1 = this.opened_topic_info.grading.split(',');\n                        for (i = 0; i < array_1.length; ++i) { //所有存在记录的段位\n                            for (k = 0; k < (this.range_sign).length; ++k) { //当前段位与全部段位名匹配\n                                if (array_1[i].split('|')[0] == this.range_sign[k]) { //赋值匹配到的段位最大最小值\n                                    this.range.scale[k].max = array_1[i].split('|')[1];\n                                    this.range.scale[k].min = array_1[i].split('|')[2];\n                                    break;\n                                } else {\n                                    continue;\n                                }\n                            }\n                        }\n                    }\n\n                    this.opened_topic_info.status = true;\n                    this.spinning.right = false;\n                })\n        },\n        //转换时间戳为时间格式\n        get_date(timeStamp, key) {\n            var date = new Date();\n            date.setTime(timeStamp * 1000);\n            var y = date.getFullYear();\n            var m = date.getMonth() + 1;\n            m = m < 10 ? ('0' + m) : m;\n            var d = date.getDate();\n            d = d < 10 ? ('0' + d) : d;\n            if (key == 'y') {\n                return y;\n            } else if (key == 'm') {\n                return m;\n            } else if (key == 'd') {\n                return d;\n            }\n            return y + '-' + m + '-' + d;\n        },\n        reverse_order(key) {\n            switch (key) {\n                case 'classes':\n                    this.user.joined_classes = this.user.joined_classes.reverse();\n                    this.user.classes_info = this.user.classes_info.reverse();\n                    $('.left .class-item').each(function () {\n                        $(this).removeClass('clicked');\n                    });\n                    break;\n            }\n        },\n        sortBy(key) {\n            if (this.sort) {\n                this.opened_topic_info.records_data = this.opened_topic_info.records_data.sort(\n                    firstBy(key, -1)\n                );\n                this.sort = !this.sort;\n            } else {\n                this.opened_topic_info.records_data = this.opened_topic_info.records_data.sort(\n                    firstBy(key)\n                );\n                this.sort = !this.sort;\n            }\n        },\n        change_y(value) {\n            this.add.info.record.yy = value;\n        },\n        change_d(value) {\n            this.add.info.record.dd = value;\n        },\n        change_m(value) {\n            this.add.info.record.mm = value;\n        },\n        change_name(value) {\n            this.add.info.record.name = value.split('|')[0];\n            this.add.info.record.user_id = parseInt(value.split('|')[1]);\n            this.add.info.record.member_index = parseInt(value.split('|')[2]);\n        },\n        change_a(value) {\n            this.range.scale[0].min = (value + 0.1).toFixed(1);\n        },\n        change_b(value) {\n            this.range.scale[1].min = (value + 0.1).toFixed(1);\n        },\n        change_c(value) {\n            this.range.scale[2].min = (value + 0.1).toFixed(1);\n        },\n        change_d(value) {\n            this.range.scale[3].min = (value + 0.1).toFixed(1);\n        },\n        change_e(value) {\n            this.range.scale[4].min = (value + 0.1).toFixed(1);\n        },\n        change_f(value) {\n            this.range.scale[5].min = (value + 0.1).toFixed(1);\n        },\n        change_u(value) {\n            this.range.scale[6].min = (value + 0.1).toFixed(1);\n        },\n        inRange(x, min, max) {\n            return ((x - min) * (x - max) <= 0);\n        },\n        //获取成绩等级\n        get_record_level(percent, index) {\n            if (!!this.opened_topic_info.grading) {\n                //百分比乘 100\n                var percent = percent * 100;\n                var array = [];\n                //段位数组\n                var array_1 = this.opened_topic_info.grading.split(',');\n                for (i = 0; i < array_1.length; i++) { //段位范围、名字数组\n                    array[i] = [];\n                    array[i]['sign'] = array_1[i].split('|')[0];\n                    array[i]['max'] = array_1[i].split('|')[1];\n                    array[i]['min'] = array_1[i].split('|')[2];\n                }\n                for (i = 0; i < array.length; i++) { //遍历全部段位\n                    if (this.inRange(percent, array[i]['min'], array[i]['max'])) {\n                        //record 源数据无 level 信息，赋值到 index 对应 record 的 level 信息\n                        this.opened_topic_info.records_data[index]['level'] = array[i]['sign'];\n                        return array[i]['sign'].toUpperCase();\n                    } else {\n                        continue;\n                    }\n                }\n            } else if (parseInt(this.user.id) !== parseInt(this.opened_class_info.superid)) {\n                return 'NG';\n            }\n        },\n        //遍历全部 record 数据，变更 level_count 数据\n        get_levels() {\n            for (i = 0; i < (this.opened_topic_info.records_data).length; i++) {\n                if (!!this.opened_topic_info.records_data[i].level) {\n                    this.level_count[this.range_sign.indexOf(this.opened_topic_info.records_data[i].level)] += 1;\n                }\n            }\n        },\n        //独立获取成绩等级，用于统计表展示，不能从数据库获取(无法返回)，按 index 获取 scale 信息\n        get_record_level_independent(percent_get, series, topic) {\n            var top = this.opened_series_info.info[series].topics_info[topic];\n            if (!!top.scale) {\n                //百分比乘 100\n                var percent = percent_get * 100;\n                var array = [];\n                //段位数组\n                var array_1 = top.scale.split(',');\n                for (i = 0; i < array_1.length; i++) { //段位范围、名字数组\n                    array[i] = [];\n                    array[i]['sign'] = array_1[i].split('|')[0];\n                    array[i]['max'] = array_1[i].split('|')[1];\n                    array[i]['min'] = array_1[i].split('|')[2];\n                }\n                for (i = 0; i < array.length; i++) { //遍历全部段位\n                    if (this.inRange(percent, array[i]['min'], array[i]['max'])) {\n                        return array[i]['sign'].toUpperCase();\n                    } else {\n                        continue;\n                    }\n                }\n            } else {\n                return 'NG';\n            }\n        },\n        //学生账户查看无匹配时\n        stu_view() {\n            var count = 0;\n            for (i = 0; i < (this.opened_topic_info.records_data).length; i++) {\n                if (this.opened_topic_info.records_data[i].user_id == this.user.id) {\n                    count += 1;\n                    break;\n                } else {\n                    continue;\n                }\n            }\n            if (count == 0) {\n                return '<p class=\"grade-not\">♂ Your Grade is not yet Available</p>';\n            } else {\n                return '';\n            }\n        },\n        //选择其他用户切换查看统计图\n        handle_switch_user(value) {\n            if (value == 'all_topics') {\n                this.open_stats('view_topics');\n            } else {\n                this.open_stats('view_users', parseInt(value));\n            }\n        },\n        //选择要复制的 topic\n        add_copy_topic(id){\n            if(this.range.copy.from !== id){\n                this.range.copy.from = id;\n            }else{\n                this.range.copy.from = null;\n            }\n        },\n    }\n});\n\n//# sourceURL=webpack:///./src/grades.js?");

/***/ })

/******/ });